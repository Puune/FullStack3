{"version":3,"sources":["modules/dbServices.js","modules/InputForm.js","modules/ContentBrowserMember.js","modules/ContentBrowser.js","modules/Filter.js","modules/Notification.js","App.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObject","post","id","delete","newObj","put","InputForm","persons","setPersons","setMsg","useState","newName","setNewName","newNumber","setNewNumber","handleFormFields","e","state","target","value","onSubmit","event","preventDefault","length","newMember","name","number","every","member","checkDublicates","dbServices","returnObj","concat","catch","error","setTimeout","window","confirm","forEach","person","list","map","onChange","type","ContentBrowserMember","entry","key","onClick","console","log","updatedList","ContentBrowser","searched","results","upCaseName","String","toUpperCase","upCaseSearch","includes","push","createFilteredList","entries","Filter","setSearched","Notification","message","className","App","useEffect","initPersons","msg","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.46d54767.chunk.js","sourcesContent":["import React from 'react';\r\nimport axios from 'axios';\r\n\r\nconst baseUrl = '/api/persons';\r\n\r\nconst readAll = () => {\r\n    const request = axios.get(baseUrl);\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst addContact = newObject => {\r\n    const request = axios.post(baseUrl, newObject);\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst deleteContact = (id) => {    \r\n    const request = axios.delete(baseUrl + `/${id}`)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst updateContact = (newObj) => {\r\n    const request = axios.put(baseUrl + `/${newObj.id}`, newObj)\r\n    return request.then(response => response.data)\r\n}\r\nexport default {readAll, addContact, deleteContact, updateContact}","import React, {useState} from 'react';\r\nimport dbServices from './dbServices';\r\n\r\nconst InputForm = ({persons, setPersons, setMsg}) => {\r\n\r\n    const [newName, setNewName] = useState('');\r\n    const [newNumber, setNewNumber] = useState('');\r\n\r\n    const handleFormFields = (e, state) => {\r\n        state(e.target.value);\r\n    }\r\n\r\n    const checkDublicates = (newMember) => persons.every(member => member.name !== newMember.name)\r\n\r\n    //override submit\r\n    const mySubmit = (event) => {\r\n      event.preventDefault();   \r\n      if(newName.length>0){\r\n        var newMember = {\r\n            name: newName,\r\n            number: newNumber\r\n        }      \r\n\r\n        //check for duplicates. notDublicate always true if list empty\r\n        let notDuplicate = (persons.length===0) ? true : checkDublicates(newMember);\r\n        if(notDuplicate){\r\n            dbServices.\r\n                addContact(newMember)\r\n                    .then(returnObj => {\r\n                    setPersons(persons.concat(returnObj));\r\n            })\r\n            .catch(error => {\r\n                setMsg(`Error Adding new person`);\r\n                setTimeout(()=>{\r\n                    setMsg(null);\r\n                }, 5000)\r\n            })\r\n\r\n            setMsg(`${newMember.name} added`)\r\n            setTimeout(()=>{\r\n                setMsg(null)\r\n            }, 3000)\r\n            //let newList = [...persons];  //OLD\r\n            //newList.push(newMember);     //OLD\r\n            //setPersons(newList);         //OLD\r\n\r\n            //empty textfield\r\n            setNewName('');\r\n            setNewNumber('');\r\n        } else {\r\n            //window.alert(`name ${newMember.name} already exists`) //OLD\r\n            //setNewName('');                                       //OLD\r\n            if(window.confirm(`${newMember.name} already exists, replace old number with new one?`)){\r\n                \r\n                //Get correct id\r\n                persons.forEach(person => {\r\n                    if(person.name === newMember.name){\r\n                        newMember.id = person.id;\r\n                    }\r\n                })\r\n\r\n                //update database, update persons                \r\n                dbServices\r\n                    .updateContact(newMember)\r\n                        .then(response => {\r\n                        let list = [...persons];\r\n                        list.map(person => {\r\n                            if(person.id===response.id){\r\n                                person.name = response.name;\r\n                                person.number = response.number;                          \r\n                            }\r\n                        })                        \r\n                        setPersons(list);\r\n                    })\r\n                    .catch(error => {\r\n                        setMsg(`Error: ${error}`);\r\n                        setTimeout(()=>{\r\n                            setMsg(null);\r\n                        }, 5000)\r\n                })\r\n\r\n                setMsg(`${newMember.name} number updated`)\r\n                setTimeout(()=>{\r\n                    setMsg(null);\r\n                }, 3000)\r\n            }\r\n        }\r\n      } else {  }\r\n  }\r\n\r\n    return(\r\n        <form onSubmit={mySubmit}>\r\n            <div>\r\n                Name: <input value={newName} onChange={(e)=>handleFormFields(e, setNewName)}/>\r\n                Number: <input value={newNumber} onChange={(e)=>handleFormFields(e, setNewNumber)}/>\r\n            </div>\r\n            <div>\r\n                <button type=\"submit\">add</button>      \r\n            </div>\r\n        </form>\r\n    )\r\n}\r\nexport default InputForm;","import React from 'react';\r\nimport dbServices from './dbServices';\r\n\r\nconst ContentBrowserMember = ({entry, setPersons, setMsg}) => {\r\n\r\n    const onClickDelete = (event) => {\r\n        console.log(entry.id);\r\n        \r\n        if(window.confirm(`Want to delete ${entry.name}?`)){\r\n            let id = entry.id;\r\n            event.preventDefault();\r\n            dbServices\r\n                .deleteContact(id)\r\n                .catch(error => {\r\n                    setMsg(`Error deleting contact`);\r\n                    setTimeout(()=>{\r\n                        setMsg(null);\r\n                    }, 5000)\r\n                })        \r\n            \r\n            dbServices\r\n                .readAll()\r\n                    .then(updatedList => {\r\n                        setPersons(updatedList)\r\n                })\r\n                .catch(error => {\r\n                    setMsg(`Error updating persons after deletion`)\r\n                    setTimeout(()=>{\r\n                        setMsg(null);\r\n                    }, 5000)\r\n                })      \r\n            \r\n            setMsg(`${entry.name} deleted`)\r\n            setTimeout(()=>{\r\n                setMsg(null)\r\n            }, 3000)\r\n        }\r\n    }\r\n    \r\n    return(\r\n        <li key={entry.id}>\r\n            {entry.name} : {entry.number} {'   '}\r\n            <button onClick={onClickDelete}>delete</button>\r\n        </li>\r\n    )\r\n}\r\nexport default ContentBrowserMember;\r\n","import React from 'react';\r\nimport ContentBrowserMember from './ContentBrowserMember';\r\n\r\nconst entries = (entry, setPersons, setMsg) => <ContentBrowserMember key={entry.id} \r\n                                                entry={entry} setPersons={setPersons} \r\n                                                setMsg={setMsg}/>\r\n\r\nconst ContentBrowser = ({persons, setPersons, searched, setMsg}) => {\r\n\r\n    //make sure the list is never empty\r\n    const createFilteredList = () => {\r\n\r\n        function composeList(member){            \r\n            let upCaseName = new String(member.name).toUpperCase();\r\n            let upCaseSearch = new String(searched).toUpperCase();\r\n            if(upCaseName.includes(upCaseSearch)){                \r\n                results.push(member);\r\n            }\r\n        }\r\n        let results = [];\r\n        persons.forEach(composeList);\r\n        \r\n        return (\r\n            results\r\n        )\r\n    }\r\n\r\n    return(\r\n        <ul>\r\n            {createFilteredList().map(entry => entries(entry, setPersons, setMsg))}\r\n        </ul>\r\n    )\r\n}\r\nexport default ContentBrowser;","import React, {useState} from 'react';\r\n\r\nconst Filter = ({searched, setSearched}) => {\r\n\r\n    const handleFormFields = (e, state) => {\r\n        state(e.target.value);\r\n    }\r\n\r\n    return(\r\n        <form>\r\n            <div>\r\n                Search: <input value={searched} onChange={(e)=>handleFormFields(e, setSearched)}/>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\nexport default Filter;","import React from 'react';\r\n\r\nconst Notification = ({message}) => {\r\n    \r\n    if(message===null){\r\n        return null\r\n    } else {\r\n        return(\r\n            <div className=\"notification\">\r\n                {message}\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Notification;","import React, {useState, useEffect} from 'react';\r\nimport InputForm from './modules/InputForm';\r\nimport ContentBrowser from './modules/ContentBrowser';\r\nimport Filter from './modules/Filter';\r\nimport dbServices from './modules/dbServices';\r\nimport Notification from './modules/Notification';\r\n\r\nconst App = () => {\r\n\r\n    useEffect(()=> {\r\n        dbServices\r\n            .readAll()\r\n                .then(initPersons => {\r\n                    setPersons(initPersons)\r\n                })\r\n                .catch(error => {\r\n                    setMsg(`Error reading from db`)\r\n                    setTimeout(()=>{\r\n                        setMsg(null);\r\n                    }, 5000)\r\n                })\r\n    },[])\r\n\r\n    const [persons, setPersons] = useState([]);\r\n    const [searched, setSearched] = useState('');\r\n    //const [content, setContent] = useState('');\r\n    const [msg, setMsg] = useState(null);\r\n    \r\n    return(\r\n        <div>\r\n            <h1>Phonebook</h1>\r\n            <Notification message={msg}/>\r\n            <Filter searched={searched}  setSearched={setSearched}/>\r\n            <h3>Add new contact</h3>\r\n            <InputForm persons={persons} setPersons={setPersons} setMsg={setMsg}/>\r\n            <h3>Numbers</h3>\r\n            <ContentBrowser persons={persons} setPersons={setPersons} \r\n                                searched={searched} setMsg={setMsg} />\r\n        </div>\r\n    )\r\n}\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}